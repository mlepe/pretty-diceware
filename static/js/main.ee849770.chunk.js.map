{"version":3,"sources":["logo.svg","components/Generator.js","components/Header.js","components/About.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Generator","props","_useState","useState","wordCount","_useState2","_slicedToArray","_useState3","_useState4","results","setResults","_useState5","_useState6","useSpaces","setUseSpaces","_useState7","_useState8","capitalize","setCapitalize","_useState9","_useState10","useDelimiter","setUseDelimiter","_useState11","_useState12","useSpecialPadding","setUseSpecialPadding","_useState13","_useState14","useLeetSpeak","setUseLeetSpeak","_useState15","_useState16","capitalizeEveryWord","_useState17","_useState18","delimiter","_useState19","_useState20","specialCharacter","_jsxs","className","children","_jsx","onClick","generated","i","code","n","Math","floor","random","push","word","words","console","log","map","e","GeneratorResultsCode","id","type","target","checked","htmlFor","processedWord","replace","c","toUpperCase","length","Header","About","href","rel","Footer","App","setWords","useEffect","w","data","root","row","forEach","col1","col2","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee849770.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/*\r\n *   Copyright (c) 2021 Matthieu Leperlier\r\n *   All rights reserved.\r\n */\r\nimport \"src/components/Generator.css\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nconst Generator = (props) => {\r\n  const [wordCount, setWordCount] = useState(props.wordCount || 5);\r\n  const [results, setResults] = useState(null);\r\n\r\n  const [useSpaces, setUseSpaces] = useState(false);\r\n  const [capitalize, setCapitalize] = useState(false);\r\n  const [useDelimiter, setUseDelimiter] = useState(false);\r\n  const [useSpecialPadding, setUseSpecialPadding] = useState(false);\r\n  const [useLeetSpeak, setUseLeetSpeak] = useState(false);\r\n\r\n  const [capitalizeEveryWord, setCapitalizeEveryWord] = useState(false);\r\n  const [delimiter, setDelimiter] = useState(\"-\");\r\n  const [specialCharacter, setSpecialCharacter] = useState(\"@\");\r\n\r\n  const generate = () => {\r\n    let generated = [];\r\n\r\n    for (let i = 0; i < wordCount; i++) {\r\n      let code = \"\";\r\n      let n = 0;\r\n      while (n < 5) {\r\n        code += Math.floor(Math.random() * (6 - 1 + 1) + 1);\r\n        n++;\r\n      }\r\n      generated.push({ code: code, word: props.words[code] });\r\n    }\r\n\r\n    console.log(generated);\r\n    setResults(generated);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Generator\">\r\n      <button className=\"Generator__button\" onClick={generate}>\r\n        {(results && \"Regenerate\") || \"Generate\"}\r\n      </button>\r\n      {results && (\r\n        <div className=\"Generator__results\">\r\n          <h2 className=\"App__title App__titleSmall\">Your passphrase</h2>\r\n          <ul className=\"Generator__resultsList\">\r\n            {results.map((e, i) => {\r\n              return (\r\n                <li key={i} className=\"Generator__resultsItem\">\r\n                  {e.word}\r\n                  <span className=\"Generator__resultsItemCode\">{e.code}</span>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          {/*<code className=\"Generator__resultsCode\">\r\n            {results.map((e, i) => {\r\n              return e.word;\r\n            })}\r\n          </code>*/}\r\n          <GeneratorResultsCode\r\n            {...{\r\n              results,\r\n              useSpaces,\r\n              capitalize,\r\n              useDelimiter,\r\n              useSpecialPadding,\r\n              useLeetSpeak,\r\n              capitalizeEveryWord,\r\n              delimiter,\r\n              specialCharacter,\r\n            }}\r\n          />\r\n          <form className=\"Generator__resultsOptions\">\r\n            <fieldset className=\"Generator__optionsFieldset\">\r\n              <legend className=\"Generator__optionsFieldsetLegend\">\r\n                <h3 className=\"App__title App__titleSmall\">Settings</h3>\r\n              </legend>\r\n              <div className=\"Generator__optionsWrapper\">\r\n                <input\r\n                  id=\"Generator__toggleSpaces\"\r\n                  type=\"checkbox\"\r\n                  onClick={(e) => {\r\n                    setUseSpaces(e.target.checked);\r\n                  }}\r\n                />\r\n                <label htmlFor=\"Generator__toggleSpaces\">Toggle spaces</label>\r\n                <input\r\n                  id=\"Generator__toggleDelimiter\"\r\n                  type=\"checkbox\"\r\n                  onClick={(e) => {\r\n                    setUseDelimiter(e.target.checked);\r\n                  }}\r\n                />\r\n                <label htmlFor=\"Generator__toggleDelimiter\">\r\n                  Toggle delimiter\r\n                </label>\r\n                <input\r\n                  id=\"Generator__toggleSpecialPadding\"\r\n                  type=\"checkbox\"\r\n                  onClick={(e) => {\r\n                    setUseSpecialPadding(e.target.checked);\r\n                  }}\r\n                />\r\n                <label htmlFor=\"Generator__toggleSpecialPadding\">\r\n                  Toggle special character padding\r\n                </label>\r\n                <input\r\n                  id=\"Generator__toggleCapitalize\"\r\n                  type=\"checkbox\"\r\n                  onClick={(e) => {\r\n                    setCapitalize(e.target.checked);\r\n                  }}\r\n                />\r\n                <label htmlFor=\"Generator__toggleCapitalize\">\r\n                  Toggle capitalize\r\n                </label>\r\n                <input\r\n                  id=\"Generator__toggleLeetSpeak\"\r\n                  type=\"checkbox\"\r\n                  onClick={(e) => {\r\n                    setUseLeetSpeak(e.target.checked);\r\n                  }}\r\n                />\r\n                <label htmlFor=\"Generator__toggleLeetSpeak\">\r\n                  Toggle 13375p34k (leetspeak)\r\n                </label>\r\n              </div>\r\n            </fieldset>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Generator;\r\n\r\nconst GeneratorResultsCode = (props) => {\r\n  return (\r\n    <code className=\"Generator__resultsCode\">\r\n      {props.results.map((e, i) => {\r\n        let processedWord = e.word;\r\n\r\n        if (props.capitalize || props.capitalizeEveryWord) {\r\n          if (i === 0) {\r\n            processedWord = e.word.replace(/^\\w/, (c) => c.toUpperCase());\r\n          }\r\n        }\r\n\r\n        if (\r\n          (props.useSpaces || props.useDelimiter) &&\r\n          i < props.results.length - 1\r\n        ) {\r\n          processedWord += props.useDelimiter ? props.delimiter : \" \";\r\n        }\r\n\r\n        if (props.useSpecialPadding) {\r\n          if (i === 0) {\r\n            processedWord = props.specialCharacter + processedWord;\r\n          }\r\n\r\n          if (i === props.results.length - 1) {\r\n            processedWord += props.specialCharacter;\r\n          }\r\n        }\r\n\r\n        if (props.useLeetSpeak) {\r\n          processedWord = processedWord.replace(\"a\", \"4\");\r\n          processedWord = processedWord.replace(\"b\", \"8\");\r\n          processedWord = processedWord.replace(\"g\", \"9\");\r\n          processedWord = processedWord.replace(\"e\", \"3\");\r\n          processedWord = processedWord.replace(\"i\", \"1\");\r\n          processedWord = processedWord.replace(\"l\", \"1\");\r\n          processedWord = processedWord.replace(\"o\", \"0\");\r\n          processedWord = processedWord.replace(\"r\", \"2\");\r\n          processedWord = processedWord.replace(\"s\", \"5\");\r\n          processedWord = processedWord.replace(\"t\", \"7\");\r\n          processedWord = processedWord.replace(\"z\", \"2\");\r\n        }\r\n\r\n        return processedWord;\r\n      })}\r\n    </code>\r\n  );\r\n};\r\n","/*\r\n *   Copyright (c) 2021 Matthieu Leperlier\r\n *   All rights reserved.\r\n */\r\nimport \"src/components/Header.css\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className=\"Header\">\r\n      <h1 className=\"Header__title App__title\">\r\n        <span className=\"App__thinTitle\">pretty</span>diceware\r\n      </h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","/*\r\n *   Copyright (c) 2021 Matthieu Leperlier\r\n *   All rights reserved.\r\n */\r\nimport \"src/components/About.css\";\r\n\r\nconst About = (props) => {\r\n  return (\r\n    <div className=\"About\">\r\n      <h2 className=\"About__title App__title\">\r\n        <span className=\"App__thinTitle\">About</span>diceware\r\n      </h2>\r\n      <div className=\"About__description\">\r\n        <p>\r\n          Diceware is a method for creating passphrases, passwords, and other\r\n          cryptographic variables using ordinary dice as a hardware random\r\n          number generator. For each word in the passphrase, five rolls of a\r\n          six-sided die are required. The numbers from 1 to 6 that come up in\r\n          the rolls are assembled as a five-digit number, e.g. 43146. That\r\n          number is then used to look up a word in a word list, for example in\r\n          the original list 43146 corresponds to munch. By generating several\r\n          words in sequence, a lengthy passphrase can be constructed randomly.\r\n        </p>\r\n        <p>\r\n          A Diceware word list is any list of 6^3 = 7776 unique words,\r\n          preferably ones the user will find easy to spell and to remember. The\r\n          contents of the word list do not have to be protected or concealed in\r\n          any way, as the security of a Diceware passphrase is in the number of\r\n          words selected, and the number of words each selected word could be\r\n          taken from.\r\n        </p>\r\n        <span className=\"About__source\">\r\n          Source:{\" \"}\r\n          <a href=\"https://en.wikipedia.org/wiki/Diceware\" target=\"_blank\" rel=\"noreferrer\">\r\n            Wikipedia\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","/*\r\n *   Copyright (c) 2021 Matthieu Leperlier\r\n *   All rights reserved.\r\n */\r\nimport React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <span>\r\n        Made by Matthieu Leperlier{\" \"}\r\n        <a href=\"https://github.com/mlepe\">(@mlepe)</a> (c) 2023\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","/*\r\n *   Copyright (c) 2021 Matthieu Leperlier\r\n *   All rights reserved.\r\n */\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport data from \"src/data/eff_large_converted.json\";\r\nimport Generator from \"src/components/Generator\";\r\nimport Header from \"src/components/Header\";\r\nimport About from \"./components/About\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nfunction App() {\r\n  const [words, setWords] = useState([]);\r\n  useEffect(() => {\r\n    let w = [];\r\n    data.root.row.forEach((e) => {\r\n      w[e.col1] = e.col2;\r\n    });\r\n    setWords(w);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <main className=\"Content\">\r\n        <Generator words={words} wordCount={5}></Generator>\r\n        <About />\r\n      </main>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/*\r\n *   Copyright (c) 2021 Matthieu Leperlier\r\n *   All rights reserved.\r\n */\r\nconst reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}